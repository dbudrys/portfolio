/**
 * CSCI 1015 Program 7
 * Class representing a tennis match
  * @author Domo
 */

public class TennisMatch {

    private int setsToWin;
    private double p1WinProb;
    private double p2WinProb;
    private int serve;
    private int p1GamesWon;
    private int p2GamesWon;
    private int p1SetsWon;
    private int p2SetsWon;
    private String results;

    /**
     * Constructor for TennisMatch class
     * @param setsToWin the number of sets that must be won to win the match
     * @param p1WinProb the probability that player 1 wins a game while serving
     * @param p2WinProb the probability that player 2 wins a game while serving
     */
    public TennisMatch(int setsToWin, double p1WinProb, double p2WinProb) {
	this.setsToWin = setsToWin;
	this.p1WinProb = p1WinProb;
	this.p2WinProb = p2WinProb;
	this.serve = 1;
	this.p1GamesWon = 0;
	this.p2GamesWon = 0;
	this.p1SetsWon = 0;
	this.p2SetsWon = 0;
	this.results = "";
    }

    /**
     * Plays a match by repeatedly playing sets until the match is over.
     * Displays the winner of the match and the results
     */
    public void playMatch() {
	while(!matchOver())
	    playSet();
	if(p1SetsWon > p2SetsWon)
	    System.out.println("Player 1 wins: " + results);
	else
	    System.out.println("Player 2 wins: " + results);
    }

    /**
     * Plays a set by repeatedly playing games until the set is over
     * Keeps track of which player won the set and the results of that set.
     */
    private void playSet() {
	    p1GamesWon = 0;
	    p2GamesWon = 0;
	    while(!setOver())
		playGame();
	    if(p1GamesWon > p2GamesWon)
		p1SetsWon++;
	    else
		p2SetsWon++;
	    results += p1GamesWon + "-" + p2GamesWon + " ";
    }

    /**
     * Plays a game using the probabilities provided.
     * Keeps track of the number of games won by each player and switches
     * the server after each game.
     */
    private void playGame() {
	double result = Math.random();
	if (serve == 1 && result <= p1WinProb)
	    p1GamesWon++;
	else
	    p2GamesWon++;
	if (serve == 2 && result <= p2WinProb)
	    p2GamesWon++;
	else
	    p1GamesWon++;
	if (serve == 1)
	    serve = 2;
	else
	    serve = 1;
    }

    /**
     * Determines if the match is over
     * @return true if either player has won the required number of sets
     */
    private boolean matchOver() {
	return p1SetsWon == setsToWin || p2SetsWon == setsToWin;
    }

    /**
     * Determines if a set is over.
     * @return true if either player has won at least 6 games and 2 more than
     * their opponent.
     */
    private boolean setOver() {
	boolean p1Wins = p1GamesWon >= 6 && p1GamesWon - p2GamesWon >= 2;
	boolean p2Wins = p2GamesWon >= 6 && p2GamesWon - p1GamesWon >= 2;
	return p1Wins || p2Wins;
    }

}
